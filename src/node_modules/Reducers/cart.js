import {ADD_CART, DELETE_CART} from 'constans.js'

const initialState = {
	sum: 0,
	products: {}
}

export default (state = initialState, action) => {
	const {type, payload} = action

	function calcSumPrice(){
		if( !Object.keys(state.products).length )
			return 0
		Object.values(state.products).map( item => {
			console.log(item)
		})
	}

	switch( type ){
		case ADD_CART:
			const {price, productId, offerId} = payload

			function bodyProductId(){
				return ({
					...state.products[productId],
					[offerId]: bodyOfferId()
				})
			}
			function bodyOfferId(){
				if( !state.products[productId] || !state.products[productId][offerId] )
					return 1
				return state.products[productId][offerId] + 1
			}
			return {
				sum: state.sum + (+payload.price),
				products: {
					...state.products, 
					[productId]: bodyProductId()
				}
			}
		case DELETE_CART:

			const deleteOffer = () => {
				if( state.products[payload.id][payload.offerId] > 1 )
					return {
						...state.products[payload.id],
						[payload.offerId]: state.products[payload.id][payload.offerId] - 1
					}
				else{
					var obj = Object.keys(state.products[payload.id]).reduce( (acc, offer) => {
						if( offer != payload.offerId ){
							obj = {
								...obj,
								[offer]: state.products[payload.id][offer]
							}
						}
						return obj
					}, {})
					return obj
				}
			}

			return {
				products: {
					...state.products,
					[payload.id]: deleteOffer()
				},
				sum: state.sum - (+payload.price)
			}
		default:
			return state
	}
}

//[payload.productId]: state.ids[payload.id] ? state.ids[payload.id] + 1 : 1
//